1. Sketch2Code

首先简单介绍一下Sketch2Code 所提供的解决方案：


（1）利用训练好的视觉模式按一定规则识别手写的UI 草图。


（2）将UI 草图转换为HTML 代码，并利用Azure Blob 存储HTML生成过程中涉及的所有步骤信息，包括原始图像，预测结果和布局和分组信息。


（3）Azure 功能用作后端入口点，通过与其他服务进行交互来协调生成过程。


（4）Azure WebSite 提供了用户端的页面，用于上传新的设计图并生成可以查看的 HTML。


简单分析一下上面的解决方案，第一点草图识别对于现在深度学习大热的图像处理来说显然不是什么难题。

可衡量，才可增长。第二点过程存储和第三点的交互协调正是对应了这个观点，通过过程存储来衡量转换过程，通过交互实现（准确率）增长。最后一点的用户端页面就没啥好说的了。
 
一点感想


每次谈到人工智能写代码，大家讨论最多的事情就是我们程序员会不会失业，还有这个时间节点大概什么时候会到来。我觉得与其考虑这个问题不如思考一下，人工智能可以取代了我们平时做的较多的重复性劳动，那有什么不可以取代的东西呢？我们应该怎么提高这方面人工智能不能取代的能力呢？

就前端来说，比如说审美、交互、性能、用户体验等方面的工作，这些是人工智能在短期内无法解决的问题。那我们在工作的过程中就要多思考和学习一下这方面的东西，慢慢调整自己的学习和工作的重心。其实人工智能可以取代一部分工作应该让我们觉得高兴，因为我们终于能从繁杂地重复性工作中解脱出来去做一些符合我们人类这个高级动物身份的事情。呈现出来的结果就是：我们要去发现和定义人工智能在代码工作方面的边界，然后利用好这个边界。一项产品，一个功能，到了我们手里以后，怎么做由我们来决定，而落地则由人工智能去实施。

还有就是前端架构的问题，之前看过一篇聊前端架构的文章，里面的观点给我留下了很深的印象。作者说道，前端确实是有架构的，但是前端的架构不是个人的概念，而是团队的概念，我相信团队之间的复杂合作能力也是人工智能短时间内无法达到的。团队里每个人要知道想要这个团队变成什么样子，要知道自己想要做什么方向，然后按自己的方向去努力，每个人走出一个平面，团队的成员所有的平面集合在一起行成一个立体的作用域。方向可以有很多，比如针对某个框架的深入研究、webpack 打包工具的研究、性能优化、css 方面、http 协议、安全等。每个人负责并擅长一个领域，就可以解决工程实践中的所有问题，何乐而不为呢？
